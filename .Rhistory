# load packages -----------------------------------------------------------
library(dplyr, warn.conflicts = FALSE)
library(stringr)
library(dbplyr)
library(purrr)
CATEGORIES <- list(
BAT = c("HR", "R", "RBI", "SB", "AVG", "OBP"),
PIT = c("W", "QS", "WQS", "SV", "HLD", "SVHLD", "SO", "ERA", "WHIP"))
PLAYER_POOL <- c("MLB", "AL", "NL")
TEAMS <- c(10, 12, 15)
lg <- list(
player_pool  = "MLB",  # MLB, AL, or NL
teams = 12, # enter number of teams in league, 10, 12, or 15
auction = list(
budget = 260,
min_bid = 1
),
categories = list(
bat = CATEGORIES$BAT[c( # select batting categories from CATEGORIES$BAT
"HR"  = TRUE,
"R"   = TRUE,
"RBI" = TRUE,
"SB"  = TRUE,
"AVG" = FALSE,
"OBP" = TRUE
)],
pit = CATEGORIES$PIT[c( # select pitching categories from CATEGORIES$PIT
"W"      = FALSE,
"QS"     = FALSE,
"WQS"    = TRUE,
"SV"     = FALSE,
"HLD"    = FALSE,
"SVHLD"  = TRUE,
"SO"     = TRUE,
"ERA"    = TRUE,
"WHIP"   = TRUE
)]
),
positions = list(
bat = c( # enter number of players at each position per team
"C"  = 1,
"1B" = 1,
"2B" = 1,
"3B" = 1,
"SS" = 1,
"CI" = 1,
"MI" = 1,
"OF" = 5,
"UT" = 1
),
pit = c( # enter number of players at each position per team
"SP" = 6,
"RP" = 3,
"P"  = 0
),
bench =  c("bench" = 4)  # enter bench slots per team
)
)
calc <- list(
type = "steamer_ros",   # select from proj_type
bat_split = .7,
rp_decr = NULL,
keepers = FALSE # include list of keepers in projections
)
slots <- list(
bat = lg$positions$bat * lg$teams,
pit = lg$positions$pit * lg$teams,
bench = lg$positions$bench * lg$teams
)
draft_pool <- list(
bat = sum(slots$bat) + (slots$bench[[1]] / 2),
pit = sum(slots$pit) + (slots$bench[[1]] / 2)
)
zbat <- paste0("z", lg$categories$bat)
zpit <- paste0("z", lg$categories$pit)
# functions ---------------------------------------------------------------
source("./R/clean_projections.R")
source("./R/weight_rate_stats.R")
source("./R/calc_zscores.R")
source("./R/draft_starters.R")
source("./R/find_optimal_zscores.R")
source("./R/position_adjustment.R")
# import test data -------------------------------------------------------------
load("./data/batter_projections.rda")
load("./data/pitcher_projections.rda")
bat <- batter_projections %>%
clean_proj_bat()
pit <- pitcher_projections %>%
clean_proj_pit()
projections <- list(
bat = bat,
pit = pit
)
lg$positions
lg$auction
sum(lg$positions)
sum(lg$positions$bat)
sum(lg$positions$pit)
sum(lg$positions$bench)
sum(lg$positions$bat) +
sum(lg$positions$pit) +
sum(lg$positions$bench)
slots_per_team <- sum(lg$positions$bat) +
sum(lg$positions$pit) +
sum(lg$positions$bench)
lg$auction$min_bid
slots_per_team - lg$auction$min_bid
lg$auction$budget
lg$auction$budget - (slots_per_team * lg$auction$min_bid)
lg$auction$budget - (slots_per_team * lg$auction$min_bid)
marginal_dollars_per_team <- lg$auction$budget -
(slots_per_team * lg$auction$min_bid)
lg$teams
marginal_dollars_per_team * lg$teams
find_optimal_zscores(projections, draft_pool, lg$categories, slots)
z_results <- find_optimal_zscores(projections, draft_pool, lg$categories, slots)
position_adjustment(z_results)
p_results <- position_adjustment(z_results)
b <- p_results$bat
p <- p_results$pit
b %>%
dplyr::filter(aPOS > 0) %>%
dplyr::summarise(value = sum(value))
b %>%
dplyr::filter(aPOS > 0) %>%
dplyr::summarise(value = sum(aPOS))
b %>%
dplyr::filter(aPOS > 0) %>%
dplyr::summarise(value = sum(aSUM))
b %>%
dplyr::filter(aSUM > 0) %>%
dplyr::summarise(value = sum(aSUM))
b %>%
dplyr::filter(aSUM > 0) %>%
dplyr::summarise(value = sum(aSUM)) %>%
dplyr::pull()
b_value <- b %>%
dplyr::filter(aSUM > 0) %>%
dplyr::summarise(value = sum(aSUM)) %>%
dplyr::pull()
p %>%
dplyr::filter(aSUM > 0) %>%
dplyr::summarise(value = sum(aSUM)) %>%
dplyr::pull()
p_value <- p %>%
dplyr::filter(aSUM > 0) %>%
dplyr::summarise(value = sum(aSUM)) %>%
dplyr::pull()
b_value + p_value
total_value <- b_value + p_value
source("./R/find_optimal_zscores.R")
View(find_optimal_zscores)
lg$categories
league <- "MLB"
teams <- 12
budget <- 260
min_bid <- 1
bat_cat <- c("HR", "R", "RBI", "SB", "OBP")
pit_cat <- c("W+QS", "SV+HLD", "SO", "ERA", "WHIP")
bat_pos <- c(
"C"  = 1,
"1B" = 1,
"2B" = 1,
"3B" = 1,
"SS" = 1,
"CI" = 1,
"MI" = 1,
"OF" = 5,
"UT" = 1
)
pit_pos = c(
"SP" = 6,
"RP" = 3,
"P"  = 0
)
bench <- 4
bat_pos
pit_pos
teams * (budget - (slots_per_team * min_bid))
slots_per_team * min_bid
budget - (slots_per_team * min_bid)
teams * (budget - (slots_per_team * min_bid))
234*12
assign_dollar_values <- function(x, value, marginal_dollars) {
(x / value) * marginal_dollars + 1
}
calc_total_value <- function(bat, pit) {
bat_value <- bat %>%
dplyr::filter(aSUM > 0) %>%
dplyr::summarise(value = sum(aSUM)) %>%
dplyr::pull()
pit_value <- pit %>%
dplyr::filter(aSUM > 0) %>%
dplyr::summarise(value = sum(aSUM)) %>%
dplyr::pull()
total_value <- bat_value + pit_value
return(total_value)
}
calc_total_value(b, p)
value <- calc_total_value(b, p)
marginal_dollars <- teams * (budget - (slots_per_team * min_bid))
assign_dollar_values(30, value, marginal_dollars)
assign_dollar_values(10, value, marginal_dollars)
assign_dollar_values(14, value, marginal_dollars)
View(b)
b %>%
dplyr::mutate(
across(
c(starts_with("z"), starts_with("a")),
~ assign_dollar_values(., value, marginal_dollars), .names = "d{.col}")
)
test <- b %>%
dplyr::mutate(
across(
c(starts_with("z"), starts_with("a")),
~ assign_dollar_values(., value, marginal_dollars), .names = "d{.col}")
)
View(test)
test <- b %>%
dplyr::mutate(
across(
c(starts_with("z"), aPOS, aSUM),
~ assign_dollar_values(., value, marginal_dollars), .names = "d{.col}")
)
View(test)
source("./R/find_optimal_zscores.R")
z_results <- find_optimal_zscores(projections, draft_pool, lg$categories, slots)
p_results <- position_adjustment(z_results)
b <- p_results$bat
p <- p_results$pit
View(b)
View(p)
b %>%
dplyr::mutate(
across(
c(starts_with("z"), aPOS, aSUM),
~ assign_dollar_values(., value, marginal_dollars), .names = "d{.col}")
)
test <- b %>%
dplyr::mutate(
across(
c(starts_with("z"), aPOS, aSUM),
~ assign_dollar_values(., value, marginal_dollars), .names = "d{.col}")
)
View(test)
b %>%
dplyr::mutate(
across(
c(starts_with("z"), aPOS, aSUM),
~ assign_dollar_values(., value, marginal_dollars), .names = "d{.col}")
) %>%
dplyr::select(!starts_with("z"), !aPOS, !aSUM)
b %>%
dplyr::mutate(
across(
c(starts_with("z"), aPOS, aSUM),
~ assign_dollar_values(., value, marginal_dollars), .names = "d{.col}")
) %>%
dplyr::select(-starts_with("z"), -aPOS, -aSUM)
drop_dz_prefix <- function(name) {
sub("^dz", "", name)
}
b %>%
dplyr::mutate(
across(
c(starts_with("z"), aPOS, aSUM),
~ assign_dollar_values(., value, marginal_dollars), .names = "d{.col}")
) %>%
dplyr::select(-starts_with("z"), -aPOS, -aSUM) %>%
dplyr::rename_with(~ drop_dz_prefix(.), starts_with("dz"))
b %>%
dplyr::mutate(
across(
c(starts_with("z"), aPOS, aSUM),
~ assign_dollar_values(., value, marginal_dollars), .names = "d{.col}")
) %>%
dplyr::select(-starts_with("z"), -aPOS, -aSUM) %>%
dplyr::rename_with(~ drop_dz_prefix(.), starts_with("dz")) %>%
dplyr::rename(PTS = SUM, aPOS = daPOS, Dollars = daSUM)
b %>%
dplyr::mutate(
across(
c(starts_with("z"), aPOS, aSUM),
~ assign_dollar_values(., value, marginal_dollars), .names = "d{.col}")
) %>%
dplyr::select(-starts_with("z"), -aPOS, -aSUM, -drafted) %>%
dplyr::rename_with(~ drop_dz_prefix(.), starts_with("dz")) %>%
dplyr::rename(PTS = SUM, aPOS = daPOS, Dollars = daSUM)
View(p)
library(devtools)
use_r("dollar_values")
transform_dataframe <- function(df) {
df %>%
dplyr::mutate(
across(
c(starts_with("z"), aPOS, aSUM),
~ assign_dollar_values(., value, marginal_dollars), .names = "d{.col}")
) %>%
dplyr::select(-starts_with("z"), -aPOS, -aSUM, -drafted) %>%
dplyr::rename_with(~ drop_dz_prefix(.), starts_with("dz")) %>%
dplyr::rename(PTS = SUM, aPOS = daPOS, Dollars = daSUM)
}
transform_dataframe <- function(df) {
df %>%
dplyr::mutate(
across(
c(starts_with("z"), aPOS, aSUM),
~ assign_dollar_values(., value, marginal_dollars), .names = "d{.col}")
) %>%
dplyr::select(-starts_with("z"), -aPOS, -aSUM, -drafted) %>%
dplyr::rename_with(~ drop_dz_prefix(.), starts_with("dz")) %>%
dplyr::rename(PTS = SUM, aPOS = daPOS, Dollars = daSUM)
}
assign_dollar_values <- function(x, value, marginal_dollars) {
(x / value) * marginal_dollars + 1
}
drop_dz_prefix <- function(name) {
sub("^dz", "", name)
}
transform_dataframe <- function(df, value, marginal_dollars) {
df %>%
dplyr::mutate(
across(
c(starts_with("z"), aPOS, aSUM),
~ assign_dollar_values(., value, marginal_dollars), .names = "d{.col}")
) %>%
dplyr::select(-starts_with("z"), -aPOS, -aSUM, -drafted) %>%
dplyr::rename_with(~ drop_dz_prefix(.), starts_with("dz")) %>%
dplyr::rename(PTS = SUM, aPOS = daPOS, Dollars = daSUM)
}
transform_dataframe <- function(df, value, marginal_dollars) {
df %>%
dplyr::mutate(
across(
c(starts_with("z"), aPOS, aSUM),
~ assign_dollar_values(., value, marginal_dollars), .names = "d{.col}")
) %>%
dplyr::select(-starts_with("z"), -aPOS, -aSUM, -drafted) %>%
dplyr::rename_with(~ drop_dz_prefix(.), starts_with("dz")) %>%
dplyr::rename(PTS = SUM, aPOS = daPOS, Dollars = daSUM)
}
assign_dollar_values <- function(x, value, marginal_dollars) {
(x / value) * marginal_dollars + 1
}
drop_dz_prefix <- function(name) {
sub("^dz", "", name)
}
lapply(p_results, transform_dataframe, value = value,
marginal_dollars = marginal_dollars)
z_results$pit
projections$pit
library(devtools)
usethis::create_github_token()
usethis::create_github_token()
usethis::create_github_token()
gitcreds::gitcreds_set()
create_from_github("https://github.com/josiahsw/myrepo.git", destdir = "~\R\tmp\")
create_from_github("https://github.com/josiahsw/myrepo.git", destdir = "~/R/tmp")
create_from_github("https://github.com/josiahsw/myrepo.git", destdir = "~/Documents/R/tmp")
create_from_github("https://github.com/josiahsw/myrepo.git", destdir = "C:\Users\josiah\OneDrive\Documents\R")
create_from_github("https://github.com/josiahsw/myrepo.git", destdir = "C:/Users/josiah/OneDrive/Documents/R")
